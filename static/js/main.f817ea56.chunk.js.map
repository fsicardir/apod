{"version":3,"sources":["components/PageContent/PageContent.tsx","components/PageLogo/PageLogo.tsx","components/PageTitle/PageTitle.tsx","components/PageHeader/PageHeader.tsx","components/Card/Card.tsx","clients/ApodClient.ts","components/Loader/Loader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StatusKind","PageLogo","className","data-testid","xmlns","viewBox","fill","d","PageTitle","PageHeader","Card","cardProps","title","format","date","href","hdImgUrl","src","imgUrl","alt","copyright","concat","description","buildRequest","url","Request","method","cache","mode","mapToError","response","status","statusMsg","statusText","getCard","a","fetch","then","ok","json","catch","error","console","Loader","version","id","xmlnsXlink","x","y","width","height","attributeType","attributeName","type","values","begin","dur","repeatCount","PageContent","useState","statusKind","Loading","setStatus","useEffect","Date","apodRs","Ready","data","Error","rs","hdurl","explanation","getContent","hot","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f817ea56.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Card from '../Card/Card';\nimport { getCard, ApodInfo, ApodError } from '../../clients/ApodClient'\nimport Loader from '../Loader/Loader';\n\nenum StatusKind {\n  Loading,\n  Error,\n  Ready,\n}\n\ninterface LoadingStatus {\n  statusKind: StatusKind.Loading,\n}\n\ninterface ErrorStatus {\n  statusKind: StatusKind.Error,\n  error: ApodError,\n}\n\ninterface ReadyStatus {\n  statusKind: StatusKind.Ready,\n  data: ApodInfo,\n}\n\ntype Status = LoadingStatus | ErrorStatus | ReadyStatus\n\nconst PageContent = () => {\n\n  const [status, setStatus] = useState<Status>({statusKind: StatusKind.Loading});\n\n  const mapResponseToCard = (rs: ApodInfo) =>\n    <Card\n      title={rs.title}\n      date={new Date(rs.date)}\n      imgUrl={rs.url}\n      hdImgUrl={rs.hdurl}\n      description={rs.explanation}\n      copyright={rs.copyright}\n    />;\n\n  useEffect(() => {\n    getCard(new Date())\n      .then((apodRs) => {\n        setStatus({\n          statusKind: StatusKind.Ready,\n          data: apodRs,\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        setStatus({\n          statusKind: StatusKind.Error,\n          error: error,\n        })\n      });\n  }, []);\n\n  const getContent = (status: Status) => {\n    switch (status.statusKind) {\n      case StatusKind.Ready:\n        return mapResponseToCard(status.data);\n      case StatusKind.Error:\n        return <p>Ups! Something wrong happened</p>;\n      case StatusKind.Loading:\n        return <Loader/>;\n    }\n  };\n\n  return (\n    <main className=\"-width-90-percent -hm-auto\">\n      { getContent(status) }\n    </main>\n  );\n};\n\nexport default PageContent;","import React from 'react';\nimport './PageLogo.css';\n\nconst PageLogo = () =>\n  <span className='page-logo' data-testid='page-logo' >\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 36 36\">\n      <path fill=\"#99AAB5\" d=\"M8.514 19.828L19.122 9.223l2.121 2.121L10.635 21.95z\"/>\n      <path fill=\"#55ACEE\" d=\"M8.515 29.728c-.781.781-2.047.781-2.828 0l-4.95-4.949c-.781-.781-.781-2.048 0-2.828L5.687 17c.781-.781 2.047-.781 2.828 0l4.95 4.95c.781.78.781 2.047 0 2.828l-4.95 4.95zm16.262-16.263c-.78.781-2.047.781-2.827 0L17 8.515c-.781-.781-.781-2.047 0-2.828l4.951-4.95c.781-.781 2.047-.781 2.828 0l4.949 4.95c.781.781.781 2.047.001 2.828l-4.952 4.95z\"/>\n      <path fill=\"#99AAB5\" d=\"M12.404 10.283L10.99 6.04c-.448-1.342-1.415-1.415-2.122-.708L6.04 8.161c-.708.707-.635 1.674.707 2.122l4.243 1.414 1.414-1.414z\"/>\n      <path fill=\"#CCD6DD\" d=\"M17.708 21.949c-.782.781-2.048.781-2.829.001l-7.071-7.071c-.781-.781-.781-2.048 0-2.829l4.242-4.242c.781-.781 2.048-.781 2.829 0l7.071 7.071c.78.781.78 2.047-.001 2.829l-4.241 4.241z\"/>\n      <path fill=\"#CCD6DD\" d=\"M21.016 21.055c-1.952 1.953-4.802 2.269-6.364.708-1.562-1.562.876-2.29 2.829-4.243 1.953-1.953 2.681-4.39 4.243-2.829 1.561 1.562 1.245 4.411-.708 6.364z\"/>\n      <path fill=\"#99AAB5\" d=\"M27.96 20.182c-2.12-2.122-5.118-1.951-7.071 0-1.952 1.954-2.121 4.95 0 7.071l7.071-7.071zm-2.828 2.829l2.121 3.535-3.535-2.121z\"/>\n      <path fill=\"#99AAB5\" d=\"M27.813 27.106c-.391.391-1.023.391-1.414 0s-.391-1.023 0-1.414 1.023-.391 1.414 0 .391 1.024 0 1.414z\"/>\n      <path fill=\"#88C9F9\" d=\"M4.27 18.416L5.686 17l7.779 7.777-1.414 1.415zM17 5.686l1.414-1.414 7.778 7.778-1.414 1.414zM.735 21.952l1.414-1.415 7.78 7.776-1.414 1.414zm19.798-19.8L21.946.737l7.781 7.775-1.413 1.414z\"/>\n      <path fill=\"#99AAB5\" d=\"M8.307 7.601c-.39.39-1.023.39-1.414 0-.391-.391-.39-1.024 0-1.415.391-.39 1.023-.39 1.414 0 .391.391.391 1.024 0 1.415z\"/>\n      <path fill=\"#FFAC33\" d=\"M23.682 30.431l.002-.051c.027-.552.497-.977 1.049-.949.016.001 2.156.063 3.8-1.58 1.637-1.638 1.578-3.772 1.58-3.801-.033-.55.397-1.021.948-1.049.552-.027 1.022.397 1.049.949.012.122.123 3.028-2.163 5.314-2.288 2.287-5.191 2.17-5.314 2.164-.535-.027-.951-.468-.951-.997z\"/>\n      <path fill=\"#FFAC33\" d=\"M24.238 33.989c0-.109.018-.221.057-.33.182-.521.752-.796 1.273-.613.107.034 2.877.893 5.964-2.195 3.127-3.126 2.414-6.126 2.382-6.252-.137-.529.184-1.077.716-1.216.53-.14 1.073.172 1.217.701.046.17 1.077 4.205-2.9 8.181-4.014 4.016-7.876 2.726-8.038 2.668-.413-.144-.671-.531-.671-.944z\"/>\n    </svg>\n  </span>;\n\nexport default PageLogo;","import React from \"react\";\nimport './PageTitle.css'\n\nconst PageTitle = () =>\n  <span className='page-title -coral-c'>\n    <span className='page-title-text -hide-md-up'>APOD</span>\n    <span className='page-title-text -hide-sm'>\n      Astronomy Picture Of the Day\n    </span>\n  </span>;\n\nexport default PageTitle;","import React from 'react';\nimport './PageHeader.css'\nimport PageLogo from '../PageLogo/PageLogo';\nimport PageTitle from '../PageTitle/PageTitle';\n\nconst PageHeader = () =>\n  <header className='-padding-v-10px -light-steel-blue-bc -light-slate-grey-bb'>\n    <div className='-width-90-percent -hm-auto -display-flex -center-flex'>\n      <PageLogo/>\n      <PageTitle/>\n    </div>\n  </header>;\n\nexport default PageHeader;","import React from 'react';\nimport { format } from 'date-fns'\nimport './Card.css';\n\ntype CardProps = {\n  title: string,\n  date: Date,\n  imgUrl: string,\n  hdImgUrl: string,\n  description: string,\n  copyright?: string,\n}\n\nconst Card = (cardProps: CardProps) =>\n  <section className='-cornflower-blue-bc -padding-10px -margin-v-10px -border-radius-15px -grid-container'>\n    <h1 className='title -bold -coral-c -font-size-lg -text-align-center -margin-2'>{cardProps.title}</h1>\n    <time className='date -bold -text-align-right -margin-2'>{format(cardProps.date, 'MM/dd/yyyy')}</time>\n    <figure className='figure -margin-2'>\n      <a href={cardProps.hdImgUrl}>\n        <img className='-max-width-100' src={cardProps.imgUrl} alt='See description attached.'/>\n      </a>\n      {\n        cardProps.copyright &&\n        <figcaption className='-margin-t-2px'>{'Copyright: '.concat(cardProps.copyright)}</figcaption>\n      }\n    </figure>\n    <p className='description -margin-2 -text-align-justify'>{cardProps.description}</p>\n  </section>;\n\nexport default Card;","import { format } from 'date-fns'\n\nexport interface ApodInfo {\n  title: string,\n  date: Date,\n  url: string,\n  hdurl: string,\n  explanation: string,\n  copyright?: string,\n}\n\nexport interface ApodError {\n  status: number,\n  statusMsg: string,\n}\n\n\nconst buildRequest = (date: Date): RequestInfo => {\n  const baseUrl = 'https://api.nasa.gov/planetary/apod?api_key=A8KCEUDMveXLJNGDlsTpZ0k3VNtI4b8kosZ8wIpJ&hd=True&date=';\n  const url = baseUrl.concat(format(date, 'yyyy-MM-dd'));\n  const init: RequestInit = {\n    method: 'GET',\n    cache: 'force-cache',\n    mode: 'cors',\n  };\n  return new Request(url, init);\n};\n\nconst mapToError = (response: Response): ApodError => {\n  return {status: response.status, statusMsg: response.statusText}\n};\n\nexport const getCard = async (date: Date): Promise<ApodInfo> => {\n  return fetch(buildRequest(date))\n    .then((response) => {\n      if (response.ok) return response.json();\n      throw mapToError(response);\n    })\n    .catch((error) => {\n      console.error('Error requesting data: ', error);\n      throw error;\n    })\n};\n","import React from 'react';\nimport './Loader.css'\n\nconst Loader = () =>\n  <div className='loader-container'>\n    <svg version=\"1.1\" id=\"L9\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n         viewBox=\"0 0 100 100\" >\n      {/*viewBox=\"0 0 100 100\" enableBackground=\"new 0 0 0 0\" xmlSpace=\"preserve\">*/}\n      <rect x=\"20\" y=\"50\" width=\"4\" height=\"10\" fill=\"#fff\">\n        <animateTransform attributeType=\"xml\"\n                          attributeName=\"transform\" type=\"translate\"\n                          values=\"0 0; 0 20; 0 0\"\n                          begin=\"0\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n      </rect>\n      <rect x=\"30\" y=\"50\" width=\"4\" height=\"10\" fill=\"#fff\">\n        <animateTransform attributeType=\"xml\"\n                          attributeName=\"transform\" type=\"translate\"\n                          values=\"0 0; 0 20; 0 0\"\n                          begin=\"0.2s\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n      </rect>\n      <rect x=\"40\" y=\"50\" width=\"4\" height=\"10\" fill=\"#fff\">\n        <animateTransform attributeType=\"xml\"\n                          attributeName=\"transform\" type=\"translate\"\n                          values=\"0 0; 0 20; 0 0\"\n                          begin=\"0.4s\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n      </rect>\n    </svg>\n  </div>;\n\nexport default Loader;","import {hot} from 'react-hot-loader/root';\nimport React from 'react';\nimport PageHeader from './components/PageHeader/PageHeader';\nimport PageContent from './components/PageContent/PageContent';\n\nfunction App() {\n  return (\n    <>\n      <PageHeader/>\n      <PageContent/>\n    </>\n  );\n}\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}